// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  password  Password?
  projects  Project[]
  // Suggested code may be subject to a license. Learn more: ~LicenseLog:2404538378.
  personas  Persona[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Password {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  salt      String
  hash      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userStories UserStory[]
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @db.ObjectId
  journeys    Journey[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  personas    Persona[]   @relation(fields: [personaIds], references: [id])
  personaIds  String[]    @db.ObjectId
}

model UserStory {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  type         StoryType
  projectId    String        @db.ObjectId
  project      Project       @relation(fields: [projectId], references: [id])
  personas     Persona[]     @relation(fields: [personaIds], references: [id])
  personaIds   String[]      @db.ObjectId
  journeySteps JourneyStep[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Persona {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String?
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id])
  stories      UserStory[] @relation(fields: [userStoryIds], references: [id])
  userStoryIds String[]    @db.ObjectId
  journeys     Journey[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  projects     Project[]   @relation(fields: [projectIds], references: [id])
  projectIds   String[]    @db.ObjectId
}

model Journey {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  steps       JourneyStep[]
  project     Project       @relation(fields: [projectId], references: [id])
  projectId   String        @db.ObjectId
  persona     Persona       @relation(fields: [personaId], references: [id])
  personaId   String        @db.ObjectId
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Might need a step name, the step description should be populated by human or generated
model JourneyStep {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  order       Int
  description String
  userStory   UserStory @relation(fields: [userStoryId], references: [id])
  userStoryId String    @db.ObjectId
  journey     Journey   @relation(fields: [journeyId], references: [id])
  journeyId   String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum StoryType {
  EPIC
  FEATURE
  STORY
}
